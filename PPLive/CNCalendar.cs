using System;
using System.Data;
using System.Configuration;
using System.Web;

namespace CNCalendar
{

    /// <summary>
    /// 农历计算类
    /// </summary>
    public class CNCalendar
    {

        private const ushort START_YEAR = 1901;

        private const ushort END_YEAR = 2050;

        private string[] ConstellationName = 

{ 

"白羊座", "金牛座", "双子座", 

"巨蟹座", "狮子座", "处女座", 

"天秤座", "天蝎座", "射手座", 

"摩羯座", "水瓶座", "双鱼座"};

        private string[] LunarHolDayName = 

{ 

"小寒", "大寒", "立春", "雨水", 

"惊蛰", "春分", "清明", "谷雨", 

"立夏", "小满", "芒种", "夏至", 

"小暑", "大暑", "立秋", "处暑", 

"白露", "秋分", "寒露", "霜降", 

"立冬", "小雪", "大雪", "冬至"};

        //数组gLunarDay存入阴历1901年到2100年每年中的月天数信息， 

        //阴历每月只能是29或30天，一年用12（或13）个二进制位表示，对应位为1表30天，否则为29天 

        private int[] gLunarMonthDay = { 

//测试数据只有1901.1.1 --2050.12.31 

0x4ae0, 0xa570, 0x5268, 0xd260, 0xd950, 0x6aa8, 0x56a0, 0x9ad0, 0x4ae8, 0x4ae0, //1910 

0xa4d8, 0xa4d0, 0xd250, 0xd548, 0xb550, 0x56a0, 0x96d0, 0x95b0, 0x49b8, 0x49b0, //1920 

0xa4b0, 0xb258, 0x6a50, 0x6d40, 0xada8, 0x2b60, 0x9570, 0x4978, 0x4970, 0x64b0, //1930 

0xd4a0, 0xea50, 0x6d48, 0x5ad0, 0x2b60, 0x9370, 0x92e0, 0xc968, 0xc950, 0xd4a0, //1940 

0xda50, 0xb550, 0x56a0, 0xaad8, 0x25d0, 0x92d0, 0xc958, 0xa950, 0xb4a8, 0x6ca0, //1950 

0xb550, 0x55a8, 0x4da0, 0xa5b0, 0x52b8, 0x52b0, 0xa950, 0xe950, 0x6aa0, 0xad50, //1960 

0xab50, 0x4b60, 0xa570, 0xa570, 0x5260, 0xe930, 0xd950, 0x5aa8, 0x56a0, 0x96d0, //1970 

0x4ae8, 0x4ad0, 0xa4d0, 0xd268, 0xd250, 0xd528, 0xb540, 0xb6a0, 0x96d0, 0x95b0, //1980 

0x49b0, 0xa4b8, 0xa4b0, 0xb258, 0x6a50, 0x6d40, 0xada0, 0xab60, 0x9370, 0x4978, //1990 

0x4970, 0x64b0, 0x6a50, 0xea50, 0x6b28, 0x5ac0, 0xab60, 0x9368, 0x92e0, 0xc960, //2000 

0xd4a8, 0xd4a0, 0xda50, 0x5aa8, 0x56a0, 0xaad8, 0x25d0, 0x92d0, 0xc958, 0xa950, //2010 

0xb4a0, 0xb550, 0xb550, 0x55a8, 0x4ba0, 0xa5b0, 0x52b8, 0x52b0, 0xa930, 0x74a8, //2020 

0x6aa0, 0xad50, 0x4da8, 0x4b60, 0x9570, 0xa4e0, 0xd260, 0xe930, 0xd530, 0x5aa0, //2030 

0x6b50, 0x96d0, 0x4ae8, 0x4ad0, 0xa4d0, 0xd258, 0xd250, 0xd520, 0xdaa0, 0xb5a0, //2040 

0x56d0, 0x4ad8, 0x49b0, 0xa4b8, 0xa4b0, 0xaa50, 0xb528, 0x6d20, 0xada0, 0x55b0}; //2050 

        //数组gLanarMonth存放阴历1901年到2050年闰月的月份，如没有则为0，每字节存两年 

        byte[] gLunarMonth ={ 

0x00, 0x50, 0x04, 0x00, 0x20, //1910 

0x60, 0x05, 0x00, 0x20, 0x70, //1920 

0x05, 0x00, 0x40, 0x02, 0x06, //1930 

0x00, 0x50, 0x03, 0x07, 0x00, //1940 

0x60, 0x04, 0x00, 0x20, 0x70, //1950 

0x05, 0x00, 0x30, 0x80, 0x06, //1960 

0x00, 0x40, 0x03, 0x07, 0x00, //1970 

0x50, 0x04, 0x08, 0x00, 0x60, //1980 

0x04, 0x0a, 0x00, 0x60, 0x05, //1990 

0x00, 0x30, 0x80, 0x05, 0x00, //2000 

0x40, 0x02, 0x07, 0x00, 0x50, //2010 

0x04, 0x09, 0x00, 0x60, 0x04, //2020 

0x00, 0x20, 0x60, 0x05, 0x00, //2030 

0x30, 0xb0, 0x06, 0x00, 0x50, //2040 

0x02, 0x07, 0x00, 0x50, 0x03}; //2050 

        //数组gLanarHoliDay存放每年的二十四节气对应的阳历日期 

        //每年的二十四节气对应的阳历日期几乎固定，平均分布于十二个月中 

        // 1月 2月 3月 4月 5月 6月 

        //小寒 大寒 立春 雨水 惊蛰 春分 清明 谷雨 立夏 小满 芒种 夏至 

        // 7月 8月 9月 10月 11月 12月 

        //小暑 大暑 立秋 处暑 白露 秋分 寒露 霜降 立冬 小雪 大雪 冬至 

        //********************************************************************************* 

        // 节气无任何确定规律,所以只好存表,要节省空间,所以.... 

        //**********************************************************************************} 

        //数据格式说明: 

        //如1901年的节气为 

        // 1月 2月 3月 4月 5月 6月 7月 8月 9月 10月 11月 12月 

        // 6, 21, 4, 19, 6, 21, 5, 21, 6,22, 6,22, 8, 23, 8, 24, 8, 24, 8, 24, 8, 23, 8, 22 

        // 9, 6, 11,4, 9, 6, 10,6, 9,7, 9,7, 7, 8, 7, 9, 7, 9, 7, 9, 7, 8, 7, 15 

        //上面第一行数据为每月节气对应日期,15减去每月第一个节气,每月第二个节气减去15得第二行 

        // 这样每月两个节气对应数据都小于16,每月用一个字节存放,高位存放第一个节气数据,低位存放 

        //第二个节气的数据,可得下表 

        byte[] gLunarHolDay ={ 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1901 

0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1902 

0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78, //1903 

0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87, //1904 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1905 

0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1906 

0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78, //1907 

0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1908 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1909 

0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1910 

0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78, //1911 

0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1912 

0x95, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1913 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1914 

0x96, 0xA5, 0x97, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78, //1915 

0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1916 

0x95, 0xB4, 0x96, 0xA6, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87, //1917 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x77, //1918 

0x96, 0xA5, 0x97, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78, //1919 

0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1920 

0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87, //1921 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x77, //1922 

0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78, //1923 

0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1924 

0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87, //1925 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1926 

0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1927 

0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1928 

0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1929 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1930 

0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1931 

0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1932 

0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1933 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1934 

0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1935 

0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1936 

0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1937 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1938 

0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1939 

0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1940 

0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1941 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1942 

0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1943 

0x96, 0xA5, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1944 

0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1945 

0x95, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, //1946 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1947 

0x96, 0xA5, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //1948 

0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x79, 0x78, 0x79, 0x77, 0x87, //1949 

0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, //1950 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, //1951 

0x96, 0xA5, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //1952 

0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1953 

0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x68, 0x78, 0x87, //1954 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1955 

0x96, 0xA5, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //1956 

0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1957 

0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1958 

0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1959 

0x96, 0xa4, 0xa5, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1960 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1961 
0x96, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1962 
0x96, 0xb4, 0x96, 0xa6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1963 
0x96, 0xa4, 0xa5, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1964 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1965 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1966 
0x96, 0xb4, 0x96, 0xa6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1967 
0x96, 0xa4, 0xa5, 0xa5, 0xa6, 0xa6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1968 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1969 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1970 
0x96, 0xb4, 0x96, 0xa6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, //1971 
0x96, 0xa4, 0xa5, 0xa5, 0xa6, 0xa6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1972 
0xa5, 0xb5, 0x96, 0xa5, 0xa6, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1973 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1974 
0x96, 0xb4, 0x96, 0xa6, 0x97, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, //1975 
0x96, 0xa4, 0xa5, 0xb5, 0xa6, 0xa6, 0x88, 0x89, 0x88, 0x78, 0x87, 0x87, //1976 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //1977 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87, //1978 
0x96, 0xb4, 0x96, 0xa6, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, //1979 
0x96, 0xa4, 0xa5, 0xb5, 0xa6, 0xa6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1980 
0xa5, 0xb4, 0x96, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x77, 0x87, //1981 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1982 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, //1983 
0x96, 0xb4, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, //1984 
0xa5, 0xb4, 0xa6, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //1985 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1986 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x79, 0x78, 0x69, 0x78, 0x87, //1987 
0x96, 0xb4, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //1988 
0xa5, 0xb4, 0xa5, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1989 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //1990 
0x95, 0xb4, 0x96, 0xa5, 0x86, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1991 
0x96, 0xb4, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //1992 
0xa5, 0xb3, 0xa5, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1993 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1994 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x76, 0x78, 0x69, 0x78, 0x87, //1995 
0x96, 0xb4, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //1996 
0xa5, 0xb3, 0xa5, 0xa5, 0xa6, 0xa6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //1997 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //1998 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //1999 
0x96, 0xb4, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //2000 
0xa5, 0xb3, 0xa5, 0xa5, 0xa6, 0xa6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2001 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //2002 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //2003 
0x96, 0xb4, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //2004 
0xa5, 0xb3, 0xa5, 0xa5, 0xa6, 0xa6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2005 
0xa5, 0xb4, 0x96, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2006 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, //2007 
0x96, 0xb4, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, //2008 
0xa5, 0xb3, 0xa5, 0xb5, 0xa6, 0xa6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2009 
0xa5, 0xb4, 0x96, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2010 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87, //2011 
0x96, 0xb4, 0xa5, 0xb5, 0xa5, 0xa6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, //2012 
0xa5, 0xb3, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, //2013 
0xa5, 0xb4, 0x96, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2014 
0x95, 0xb4, 0x96, 0xa5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //2015 
0x95, 0xb4, 0xa5, 0xb4, 0xa5, 0xa6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, //2016 
0xa5, 0xc3, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, //2017 
0xa5, 0xb4, 0xa6, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2018 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //2019 
0x95, 0xb4, 0xa5, 0xb4, 0xa5, 0xa6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86, //2020 
0xa5, 0xc3, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //2021 
0xa5, 0xb4, 0xa5, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2022 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, //2023 
0x95, 0xb4, 0xa5, 0xb4, 0xa5, 0xa6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, //2024 
0xa5, 0xc3, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //2025 
0xa5, 0xb3, 0xa5, 0xa5, 0xa6, 0xa6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2026 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //2027 
0x95, 0xb4, 0xa5, 0xb4, 0xa5, 0xa6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, //2028 
0xa5, 0xc3, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //2029 
0xa5, 0xb3, 0xa5, 0xa5, 0xa6, 0xa6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2030 
0xa5, 0xb4, 0x96, 0xa5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, //2031 
0x95, 0xb4, 0xa5, 0xb4, 0xa5, 0xa6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, //2032 
0xa5, 0xc3, 0xa5, 0xb5, 0xa6, 0xa6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x86, //2033 
0xa5, 0xb3, 0xa5, 0xa5, 0xa6, 0xa6, 0x88, 0x78, 0x88, 0x78, 0x87, 0x87, //2034 
0xa5, 0xb4, 0x96, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2035 
0x95, 0xb4, 0xa5, 0xb4, 0xa5, 0xa6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, //2036 
0xa5, 0xc3, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, //2037 
0xa5, 0xb3, 0xa5, 0xa5, 0xa6, 0xa6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2038 
0xa5, 0xb4, 0x96, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2039 
0x95, 0xb4, 0xa5, 0xb4, 0xa5, 0xa6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, //2040 
0xa5, 0xc3, 0xa5, 0xb5, 0xa5, 0xa6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, //2041 
0xa5, 0xb3, 0xa5, 0xb5, 0xa6, 0xa6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, //2042 
0xa5, 0xb4, 0x96, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2043 
0x95, 0xb4, 0xa5, 0xb4, 0xa5, 0xa6, 0x97, 0x87, 0x87, 0x88, 0x87, 0x96, //2044 
0xa5, 0xc3, 0xa5, 0xb4, 0xa5, 0xa6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, //2045 
0xa5, 0xb3, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, //2046 
0xa5, 0xb4, 0x96, 0xa5, 0xa6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, //2047 
0x95, 0xb4, 0xa5, 0xb4, 0xa5, 0xa5, 0x97, 0x87, 0x87, 0x88, 0x86, 0x96, //2048 
0xa4, 0xc3, 0xa5, 0xa5, 0xa5, 0xa6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86, //2049 
0xa5, 0xc3, 0xa5, 0xb5, 0xa6, 0xa6, 0x87, 0x88, 0x78, 0x78, 0x87, 0x87}; //2050 


        private DateTime m_date;
        public DateTime date
        {
            get { return m_date; }
            set { m_date = value; }
        }

        public CNCalendar()
        {
            date = DateTime.Now;
        }
        public CNCalendar(DateTime dt)
        {
            date = dt;
        }
        //计算指定日期的星座序号 
        public int getconstellation()
        {
            int y, m, d;
            y = m_date.Year;
            m = m_date.Month;
            d = m_date.Day;
            y = m * 100 + d;
            if (((y >= 321) && (y <= 419))) { return 0; }
            else if ((y >= 420) && (y <= 520)) { return 1; }
            else if ((y >= 521) && (y <= 620)) { return 2; }
            else if ((y >= 621) && (y <= 722)) { return 3; }
            else if ((y >= 723) && (y <= 822)) { return 4; }
            else if ((y >= 823) && (y <= 922)) { return 5; }
            else if ((y >= 923) && (y <= 1022)) { return 6; }
            else if ((y >= 1023) && (y <= 1121)) { return 7; }
            else if ((y >= 1122) && (y <= 1221)) { return 8; }
            else if ((y >= 1222) || (y <= 119)) { return 9; }
            else if ((y >= 120) && (y <= 218)) { return 10; }
            else if ((y >= 219) && (y <= 320)) { return 11; }
            else { return -1; };
        }

        //计算指定日期的星座名称 
        public string getconstellationname()
        {
            int constellation;
            constellation = getconstellation();
            if ((constellation >= 0) && (constellation <= 11))
            { return ConstellationName[constellation]; }
            else
            { return ""; };
        }

        //判断日期是否过了本月的第一个节气
        public bool holdaypass()
        {
            byte flag;
            int day, iyear, imonth, iday;
            iyear = m_date.Year;
            if ((iyear < START_YEAR) || (iyear > END_YEAR))
            { return false; };
            imonth = m_date.Month;
            iday = m_date.Day;
            if (m_date.Hour >= 23)
                iday++;

            flag = gLunarHolDay[(iyear - START_YEAR) * 12 + imonth - 1];
            day = 15 - ((flag >> 4) & 0x0f);
            if (iday >= day)
            { return true; }
            else
            { return false; }
        }

        //计算公历当天对应的节气 0-23，-1表示不是节气 
        public int l_getlunarholday()
        {
            byte flag;
            int day, iyear, imonth, iday;
            iyear = m_date.Year;
            if ((iyear < START_YEAR) || (iyear > END_YEAR))
            { return -1; };
            imonth = m_date.Month;
            iday = m_date.Day;
            flag = gLunarHolDay[(iyear - START_YEAR) * 12 + imonth - 1];
            if (iday < 15)
            { day = 15 - ((flag >> 4) & 0x0f); }
            else
            { day = (flag & 0x0f) + 15; };
            if (iday == day)
            {
                if (iday > 15)
                { return (imonth - 1) * 2 + 1; }
                else
                { return (imonth - 1) * 2; }
            }
            else
            { return -1; };
        }

        public string formatmonth(ushort imonth, bool blunar)
        {
            string sztext = "正二三四五六七八九十";
            string strmonth;
            if ((!blunar) && (imonth == 1))
            { return "一月"; }
            if (imonth <= 10)
            {
                strmonth = "";
                strmonth = strmonth + sztext.Substring(imonth - 1, 1);
                strmonth = strmonth + "月";
                return strmonth;
            }
            if (imonth == 11)
            { strmonth = "十一"; }
            else
            { strmonth = "十二"; }
            return strmonth + "月";
        }


        public string formatlunarday(ushort iday)
        {
            string sztext1 = "初十廿三";
            string sztext2 = "一二三四五六七八九十";
            string strday;
            if ((iday != 20) && (iday != 30))
            {
                strday = sztext1.Substring((iday - 1) / 10, 1);
                strday = strday + sztext2.Substring((iday - 1) % 10, 1);
            }
            else
            {
                strday = sztext1.Substring((iday / 10) * 2 + 1, 2);
                strday = strday + "十";
            }
            return strday;
        }

        public string getlunarholday()
        {
            int iyear, imonth, iday;
            int i;
            TimeSpan ts;
            iyear = (int)(m_date.Year);
            if ((iyear < START_YEAR) || (iyear > END_YEAR))
            { return ""; };
            i = l_getlunarholday();
            if ((i >= 0) && (i <= 23))
            { return LunarHolDayName[i]; }
            else
            {
                ts = m_date - (new DateTime(START_YEAR, 1, 1));
                l_calclunardate(out iyear, out imonth, out iday, (uint)(ts.Days));
                return formatmonth((ushort)(imonth), true) + formatlunarday((ushort)(iday));
            }
        }

        //返回阴历ilunaryear年的闰月月份，如没有返回0 1901年1月---2050年12月 
        public int getleapmonth(ushort ilunaryear)
        {
            byte flag;
            if ((ilunaryear < START_YEAR) || (ilunaryear > END_YEAR))
            { return 0; };
            flag = gLunarMonth[(ilunaryear - START_YEAR) / 2];
            if ((ilunaryear - START_YEAR) % 2 == 0)
            { return flag >> 4; }
            else
            { return flag & 0x0f; }
        }

        //返回阴历ilunaryer年阴历ilunarmonth月的天数，如果ilunarmonth为闰月， 
        //高字为第二个ilunarmonth月的天数，否则高字为0 1901年1月---2050年12月 
        public uint lunarmonthdays(ushort ilunaryear, ushort ilunarmonth)
        {
            int height, low;
            int ibit;
            if ((ilunaryear < START_YEAR) || (ilunaryear > END_YEAR))
            { return 30; }
            height = 0;
            low = 29;
            ibit = 16 - ilunarmonth;
            if ((ilunarmonth > getleapmonth(ilunaryear)) && (getleapmonth(ilunaryear) > 0))
            { ibit--; }
            if ((gLunarMonthDay[ilunaryear - START_YEAR] & (1 << ibit)) > 0)
            { low++; }
            if (ilunarmonth == getleapmonth(ilunaryear))
            {
                if ((gLunarMonthDay[ilunaryear - START_YEAR] & (1 << (ibit - 1))) > 0)
                { height = 30; }
                else
                { height = 29; }
            }
            return (uint)((uint)(low) | (uint)(height) << 16); //合成为uint 
        }

        //返回阴历ilunaryear年的总天数 1901年1月---2050年12月 
        public int lunaryeardays(ushort ilunaryear)
        {
            int days;
            uint tmp;
            if ((ilunaryear < START_YEAR) || (ilunaryear > END_YEAR))
            { return 0; };
            days = 0;
            for (ushort i = 1; i <= 12; i++)
            {
                tmp = lunarmonthdays(ilunaryear, i);
                days = days + ((ushort)(tmp >> 16) & 0xffff); //取高位 
                days = days + (ushort)(tmp); //取低位 
            }
            return days;
        }

        //计算从1901年1月1日过ispandays天后的阴历日期 
        public void l_calclunardate(out int iyear, out int imonth, out int iday, uint ispandays)
        {
            uint tmp;
            //阳历1901年2月19日为阴历1901年正月初一 
            //阳历1901年1月1日到2月19日共有49天 
            if (ispandays < 49)
            {
                iyear = (int)(START_YEAR) - 1;
                if (ispandays < 19)
                {
                    imonth = 11;
                    iday = (int)(11 + ispandays);
                }
                else
                {
                    imonth = 12;
                    iday = (int)(ispandays - 18);
                }
                return;
            }
            //下面从阴历1901年正月初一算起 
            ispandays = ispandays - 49;
            iyear = START_YEAR;
            imonth = 1;
            iday = 1;
            //计算年 
            tmp = (uint)lunaryeardays((ushort)(iyear));
            while (ispandays >= tmp)
            {
                ispandays = ispandays - tmp;
                iyear++;
                tmp = (uint)lunaryeardays((ushort)(iyear));
            }
            //计算月 
            tmp = lunarmonthdays((ushort)(iyear), (ushort)(imonth)); //取低位 
            while (ispandays >= tmp)
            {
                ispandays = ispandays - tmp;
                if (imonth == getleapmonth((ushort)(iyear)))
                {
                    tmp = (lunarmonthdays((ushort)(iyear), (ushort)(imonth)) >> 16) & 0xffff; //取高位 
                    if (ispandays < tmp)
                    { break; }
                    ispandays = ispandays - tmp;
                }
                imonth++;
                tmp = lunarmonthdays((ushort)(iyear), (ushort)(imonth)); //取低位 
            }
            //计算日 
            iday = (ushort)(iday + ispandays);
        }


        //把iyear年格式化成天干记年法表示的字符串 
        public string formatlunaryear()
        {
            string stryear;
            string sztext1 = "甲乙丙丁戊己庚辛壬癸";
            string sztext2 = "子丑寅卯辰巳午未申酉戌亥";
            string sztext3 = "鼠牛虎免龙蛇马羊猴鸡狗猪";
            ushort iyear;
            iyear = (ushort)(m_date.Year);
            stryear = sztext1.Substring((iyear - 4) % 10, 1);
            stryear = stryear + sztext2.Substring((iyear - 4) % 12, 1);
            stryear = stryear + " ";
            stryear = stryear + sztext3.Substring((iyear - 4) % 12, 1);
            stryear = stryear + "年";
            return stryear;
        }

        //排年天干
        public string yeartg()
        {
            string sztext1 = "甲乙丙丁戊己庚辛壬癸";
            ushort iyear;
            iyear = (ushort)(m_date.Year);
            if((m_date.Month == 2 && !holdaypass()) || m_date.Month == 1)
                iyear = (ushort)(m_date.Year - 1);
            
            return sztext1.Substring((iyear - 4) % 10, 1);
        }
        //排年地支
        public string yeardz()
        {
            string sztext1 = "子丑寅卯辰巳午未申酉戌亥";
            ushort iyear;
            iyear = (ushort)(m_date.Year);
            if ((m_date.Month == 2 && !holdaypass()) || m_date.Month == 1)
                iyear = (ushort)(m_date.Year - 1);

            return sztext1.Substring((iyear - 4) % 12, 1);
        }
        //月干
        public string monthtg()
        {
            string sztext1 = "甲乙丙丁戊己庚辛壬癸";
            ushort imonth,iyear;
            iyear = (ushort)(m_date.Year);
            imonth = (ushort)(m_date.Month);
            if (!holdaypass())
                imonth = (ushort)(m_date.Month - 1);
            if (imonth == 0)
            {
                imonth = 12;
                iyear--;
            }

            return sztext1.Substring(((iyear -4) * 12 + imonth) % 10, 1);
        }
        //月支
        public string monthdz()
        {
            string sztext1 = "子丑寅卯辰巳午未申酉戌亥";
            ushort imonth;
            imonth = (ushort)(m_date.Month);
            if (!holdaypass())
                imonth = (ushort)(m_date.Month - 1);
            if (imonth == 0)
            {
                imonth = 11;
                
            }

            return sztext1.Substring(imonth, 1);
        }
        //日干
        public string daytg()
        {
            string sztext1 = "甲乙丙丁戊己庚辛壬癸";
            TimeSpan ts = m_date - (new DateTime(START_YEAR, 1, 1));
            int tmpdays = ts.Days;
            if (m_date.Hour >= 23)
                tmpdays++;
            return sztext1.Substring((tmpdays + 5) % 10, 1);
        }
        //日支
        public string daydz()
        {
            string sztext1 = "子丑寅卯辰巳午未申酉戌亥";
            TimeSpan ts = m_date - (new DateTime(START_YEAR, 1, 1));
            int tmpdays = ts.Days;
            if (m_date.Hour >= 23)
                tmpdays++;
            return sztext1.Substring((tmpdays + 3) % 12, 1);
        }
        //时干
        public string hourtg()
        {
            string sztext1 = "甲乙丙丁戊己庚辛壬癸";
            TimeSpan ts = m_date - (new DateTime(START_YEAR, 1, 1));
            ushort ihour = (ushort)(m_date.Hour);
            ushort iday = (ushort)(m_date.Day);
            if (ihour == 23)
            {
                ihour = 0;
                iday++;
            }
            ihour = (ushort)((ihour + 1) / 2);

            ihour = (ushort)((ts.Days * 12 + ihour + 2)%10);
            return sztext1.Substring(ihour, 1);
        }
        //时支
        public string hourdz()
        {
            string sztext1 = "子丑寅卯辰巳午未申酉戌亥";
            ushort ihour = (ushort)(m_date.Hour);
            ihour = (ushort)((ihour + 1) / 2);
            if (ihour == 12)
                ihour = 0;
            return sztext1.Substring(ihour, 1);
        }


        //旬空
        public string xunkong()
        {
            string sztext1 = "子丑寅卯辰巳午未申酉戌亥";
            TimeSpan ts = m_date - (new DateTime(START_YEAR, 1, 1));
            ushort days = (ushort)((ts.Days - 5) / 10);
            return sztext1.Substring(((days + 3) % 6) * 2, 2);
        }


    } //class cncalendar 






  //  public class test
 //   {
 //       static void main(string[] args)
 //       {
  //          cncalendar dt = new cncalendar(DateTime.today);
  //          console.writeline("今天是：" + dt.date.tostring() + dt.getconstellationname());
  //          console.writeline(dt.l_getlunarholday());
  //          console.writeline(dt.getlunarholday());
  //          console.writeline("闰月" + dt.getleapmonth(uint16.parse(args[0])));
   //         console.writeline("2月的天数" + dt.lunarmonthdays(uint16.parse(args[0]), uint16.parse(args[1])));
  //          console.writeline("天数" + dt.lunaryeardays(uint16.parse(args[0])));
   //         console.writeline("" + dt.formatlunaryear());
  //          dt.date = DateTime.today.adddays(1);
  //          console.writeline("明天是：" + dt.date.tostring() + dt.getconstellationname());
  //      }
  //  } //class test 
}
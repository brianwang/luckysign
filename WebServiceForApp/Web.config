<?xml version="1.0"?>
<!--
  有关如何配置 ASP.NET 应用程序的详细信息，请访问
  http://go.microsoft.com/fwlink/?LinkId=169433
  -->
<configuration>
  <configSections>
    <section name="castle" type="Castle.Windsor.Configuration.AppDomain.CastleSectionHandler,Castle.Windsor" requirePermission="false" />
    <section name="wcfServices" type="XMS.Core.WCF.Client.Configuration.ServiceReferencesSection,  XMS.Core" requirePermission="false" />
  </configSections>
  <appSettings>
    <add key="AppName" value="LS"/>
    <add key="AppVersion" value="1.0"/>
    <add key="ServiceName" value="SSqianService"/>
    <add key="DisplayName" value="上上签Rest服务"/>
    <add key="ThirdLoginFilePath" value="D:\WebSite\MainSite\App_Data\ThirdLogin.xml"/>
    <add key="ConnectionString" value="Data Source=42.121.116.88;Initial Catalog=upup1000;uid=sa;password=Pink1437"/>

    <!--mail setting-->
    <add key="IsSendEMail" value="false"/>
    <add key="MailCharset" value="utf-8"/>
    <add key="MailFrom" value="passport@ssqian.com"/>
    <add key="MailFromName" value="上上签账号服务"/>
    <add key="MailServer" value="smtp.exmail.qq.com"/>
    <add key="MailUserName" value="passport@ssqian.com"/>
    <add key="MailUserPassword" value="Abc123456"/>
    <!--mail setting-->
  </appSettings>
  <!-- castle 配置节是必须的 -->
  <castle>
    <include uri="assembly://XMS.Core/container.core.config"/>
  </castle>
  <!-- 
    wcfServices 配置节是可选的，用于配置系统引用的 WCF 服务
            serviceName WCF服务的名称，可随便写，保持唯一即可；
            serviceType WCF服务客户端代理接口的全名称；
  -->
  <wcfServices>
    <!-- 日志中心服务 -->
    <add serviceName="LogCenterService" serviceType="XMS.Core.Logging.ServiceModel.ILogCenterService, XMS.Core"/>
    <!-- 下面插入您自己的服务定义 -->
    <!--<add serviceName="PortalResService" serviceType="XMS.Portal.Restaurant.IRestaurantService,WCF.Portal.Restaurant.Proxy" cacheModel="PerRequest"/>-->
  </wcfServices>
  <system.net>
    <settings>
      <httpWebRequest useUnsafeHeaderParsing="true"/>
    </settings>
    <defaultProxy enabled="false" useDefaultCredentials="false"/>
    <connectionManagement>
      <add address="*" maxconnection="128"/>
    </connectionManagement>
  </system.net>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/>
  </startup>
  <system.web>
    <membership defaultProvider="ClientAuthenticationMembershipProvider">
      <providers>
        <add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri=""/>
      </providers>
    </membership>
    <roleManager defaultProvider="ClientRoleProvider" enabled="true">
      <providers>
        <add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400"/>
      </providers>
    </roleManager>
    <compilation debug="true" targetFramework="4.0"/>
    <pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID"/>
  </system.web>
  <system.serviceModel>
    <bindings>
      <netTcpBinding>
        <!--
     超时控制：
          openTimeout       系统默认值 1 分钟，指传输引发异常之前可用于打开基础连接的时间间隔；
          sendTimeout       系统默认值 1 分钟，指传输引发异常之前可用于完成写入操作的时间间隔；
                              系统为请求发起方时，指可用于发送请求消息的最大时间；
                              系统为请求响应方时，指可用于发送请求响应消息的最大时间；
          closeTimeout      系统默认值 1 分钟，在传输引发异常之前可用于关闭连接的时间间隔；
                              系统为请求发起方时，指系统主动关闭连接过程中可用的最大时间；
                              系统为请求响应方时，指系统因处于非活动状态超过 receiveTimeout 或 inactivityTimeout 限定值时主动关闭连接过程中可用的最大时间；
          receiveTimeout    系统默认值 10 分钟，指系统可用于等待接收消息或基础结构消息的最大时间，如果超过该时间间隔仍未收到任何消息，将关闭基础连接；
          
          inactivityTimeout 系统默认值 10 分钟，可靠回话 <reliableSession inactivityTimeout="00.00:05:00"/>
                            指系统可用于等待接收消息或基础结构消息的最大时间，如果超过该时间间隔仍未收到任何消息，将关闭基础连接；
     连接控制：
          maxConnections   指定客户端上可存入池中以备后续重复使用的最大连接数，以及服务器上可挂起调度的最大连接数。
          listenBacklog    指定可挂起的最大排队连接请求数。默认值为 10。ListenBacklog 是套接字级别的属性，描述要排队的“挂起接受”请求数。 应确保最大并发连接数不超过基础套接字队列。
     传输控制：
          transferMode，   指定为请求或响应对消息进行缓冲处理还是流式处理，TransferMode枚举类型，默认值为 Buffered。
          maxBufferSize，  指定内存中用于对传入消息进行缓冲的最大字节数。默认值为 65,536 字节。对于经过流处理的消息，该属性仅适用于消息头；对于缓冲的消息，该属性适用于整个消息。
                           此属性的值必须小于或等于 MaxReceivedMessageSize，且必须大于消息头的大小，否则通道会引发异常。
          maxReceivedMessageSize 指定允许接收的最大消息大小。默认值为 65,536 字节。
                           此属性可以防范两种易受黑客攻击的情况：以极大或无限指定长度发送消息；或将数据持续发送到连接的命名管道。
          ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          maxBufferPoolSize 指定传输使用的任何缓冲池的最大大小。默认值为 524,288 字节。
                            WCF的许多组件都使用缓冲区。每次使用缓冲区时，创建和销毁它们都将占用大量资源，而缓冲区的垃圾回收过程也是如此。
                            利用缓冲池，可以从缓冲池中获得缓冲区，使用缓冲区，然后在完成工作后将其返回给缓冲池。这样就避免了创建和销毁缓冲区的系统开销。
                            缺点是内存的使用增加，因为不会对缓冲区进行垃圾回收。如果 MaxBufferPoolSize 设置为 0，则不会将任何缓冲区返回给缓冲池，而是开始进行垃圾回收。
     事务处理：
          transactionProtocol 事务进行流处理时使用的事务协议。OleTransactions 或 WSAtomicTransactionOctober2004，指定用于事务流的事务处理协议。 默认值为 OleTransactions。 
     -->
        <binding name="NetTcpBinding" hostNameComparisonMode="StrongWildcard" openTimeout="00:00:02" sendTimeout="00:01:00" closeTimeout="00:01:00" receiveTimeout="00:02:00" maxConnections="1000" listenBacklog="1000" transferMode="Buffered" maxBufferSize="104857600" maxReceivedMessageSize="104857600" maxBufferPoolSize="524288" transactionProtocol="OleTransactions">
          <readerQuotas maxDepth="32" maxStringContentLength="2147483647" maxArrayLength="2147483647" maxBytesPerRead="4096"/>
          <security mode="None"/>
        </binding>
      </netTcpBinding>
      <wsHttpBinding>
        <binding name="WSHttpBinding" openTimeout="00:00:05" sendTimeout="00:01:00" closeTimeout="00:01:00" receiveTimeout="00:03:00" maxBufferPoolSize="2147483647" maxReceivedMessageSize="2147483647">
          <readerQuotas maxDepth="32" maxStringContentLength="2147483647" maxArrayLength="2147483647" maxBytesPerRead="4096" maxNameTableCharCount="2147483647"/>
        </binding>
      </wsHttpBinding>
      <webHttpBinding>
        <binding name="JsonWebBinding" openTimeout="00:00:05" sendTimeout="00:01:00" closeTimeout="00:01:00" receiveTimeout="00:03:00" maxBufferSize="2147483647" maxReceivedMessageSize="2147483647" transferMode="Buffered" maxBufferPoolSize="2147483647" contentTypeMapper="XMS.Core.WCF.JsonContentTypeMapper,XMS.Core">
          <readerQuotas maxDepth="32" maxStringContentLength="2147483647" maxArrayLength="2147483647" maxBytesPerRead="4096" maxNameTableCharCount="2147483647"/>
          <security mode="None"/>
        </binding>
        <binding name="RawWebBinding" openTimeout="00:00:05" sendTimeout="00:01:00" closeTimeout="00:01:00" receiveTimeout="00:03:00" maxBufferSize="2147483647" maxReceivedMessageSize="2147483647" transferMode="Buffered" maxBufferPoolSize="2147483647" contentTypeMapper="XMS.Core.WCF.RawContentTypeMapper,XMS.Core">
          <readerQuotas maxDepth="32" maxStringContentLength="2147483647" maxArrayLength="2147483647" maxBytesPerRead="4096" maxNameTableCharCount="2147483647"/>
          <security mode="None"/>
        </binding>
      </webHttpBinding>
    </bindings>
    <services>
      <service name="WebServiceForApp.SSQianService" behaviorConfiguration="IOCBehavior">
        <endpoint binding="webHttpBinding" contract="WebServiceForApp.ISSQianService" address="" bindingConfiguration="JsonWebBinding" behaviorConfiguration="WebBehavior"/>
      </service>
      <service name="WebServiceForApp.QAService" behaviorConfiguration="IOCBehavior">
        <endpoint binding="webHttpBinding" contract="WebServiceForApp.IQAService" address="/QA" bindingConfiguration="JsonWebBinding" behaviorConfiguration="WebBehavior"/>
      </service>
    </services>
    <behaviors>
      <serviceBehaviors>
        <behavior name="IOCBehavior">
          <IOC showExceptionDetailToClient="true"/>
          <!--
            必读：每个会话请求代表一个连接，每个连接可发起多个调用（消息），消息需要服务实例并发处理，一个服务实例可以同时处理多个消息：
                  maxConcurrentCalls     系统默认值 16，指定服务可同时处理的最多消息数，超过该值的消息将进入等待状态，直到某消息被处理完；
                  maxConcurrentInstances 系统默认值 26，指定服务可同时执行的服务实例的数量，该值与 InstanceContextMode 属性紧密相关，如果消息到达时，InstanceContext 对象数已达最大上限，则等待直至 InstanceContext 对象关闭；
                  maxConcurrentSessions  系统默认值 10，指定服务可同时接受的客户端会话请求（连接）的最大数量, 如果服务上打开的会话数已达到该值，则会阻止后续其它会话请求；
                                         如果同时为服务的绑定配置了 maxConnections 属性，那么最大连接数以两者中的较小者为限；
          -->
          <serviceThrottling maxConcurrentCalls="1000" maxConcurrentInstances="1000" maxConcurrentSessions="1000"/>
          <serviceMetadata httpGetEnabled="true"/>
          <serviceDebug includeExceptionDetailInFaults="true"/>
          <dataContractSerializer maxItemsInObjectGraph="2147483647"/>
        </behavior>
      </serviceBehaviors>
      <endpointBehaviors>
        <behavior name="WebBehavior">
          <webHttp helpEnabled="true" defaultBodyStyle="WrappedRequest" defaultOutgoingResponseFormat="Json" faultExceptionEnabled="true"/>
        </behavior>
      </endpointBehaviors>
    </behaviors>
    <extensions>
      <behaviorExtensions>
        <add name="IOC" type="XMS.Core.WCF.IOCBehaviorSection, XMS.Core"/>
      </behaviorExtensions>
    </extensions>
  </system.serviceModel>
</configuration>